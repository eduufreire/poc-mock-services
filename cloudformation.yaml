AWSTemplateFormatVersion: 2010-09-09
Description: Configuração dos recursos necessários para API de Mocks

Resources:
  Dynamo:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MockServices
      KeySchema:
        - AttributeName: service
          KeyType: HASH
        - AttributeName: statusCode
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: service
          AttributeType: S
        - AttributeName: statusCode
          AttributeType: N
        - AttributeName: endpoint
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: endpoint-index
          KeySchema:
            - AttributeName: endpoint
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  LambdaMock:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PocMockServices
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole
      Timeout: 60
      MemorySize: 128
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              print("Event received:", event)
              return {
                  "statusCode": 200,
                  "body": "Hello from inline Lambda!"
              }

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "ApiGatewayPOC"
      Parameters:
        endpointConfigurationTypes: REGIONAL
      BinaryMediaTypes:
        - "application/json"

  PocResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: "mocks"

  PostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      RestApiId: !Ref RestApi
      ResourceId: !Ref PocResource
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - Region: !Ref "AWS::Region"
            LambdaArn: !GetAtt LambdaMock.Arn
        PassthroughBehavior: WHEN_NO_MATCH
        Credentials: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200

  GetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      RestApiId: !Ref RestApi
      ResourceId: !Ref PocResource
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Uri: !Sub
          - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - Region: !Ref "AWS::Region"
            LambdaArn: !GetAtt LambdaMock.Arn
        PassthroughBehavior: WHEN_NO_MATCH
        Credentials: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole
        RequestParameters:
          integration.request.querystring.service: method.request.querystring.service
          integration.request.querystring.endpoint: method.request.querystring.endpoint
          integration.request.querystring.statusCode: method.request.querystring.statusCode
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
      RequestParameters:
        method.request.querystring.service: true
        method.request.querystring.endpoint: true
        method.request.querystring.statusCode: true

  RestApiDeploy:
    Type: AWS::ApiGateway::Deployment
    DependsOn: PostMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: prod
